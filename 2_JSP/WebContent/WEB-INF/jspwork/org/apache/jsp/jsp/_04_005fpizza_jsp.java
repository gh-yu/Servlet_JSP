/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-10-29 07:28:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;

public final class _04_005fpizza_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	Date now = new Date();
	String today = String.format("%ty년 %tm월 %td일 %tA", now, now, now, now);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("	table{border-collapse: collapse; font-size: small; height: 300px; width: 400px;}\r\n");
      out.write("	tr{padding:20px;}\r\n");
      out.write("	form{font-size: small;}\r\n");
      out.write("	label:nth-of-type(1), label:nth-of-type(2){margin-right: 13px;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h1>오늘은 <span style=\"color: pink;\">");
      out.print( today );
      out.write("</span>입니다.</h1>\r\n");
      out.write("	 \r\n");
      out.write("	<h1>피자 아카데미</h1>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>종류</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>가격</th>\r\n");
      out.write("				<td rowspan=\"12\" width=\"10px\"></td> <!-- thead영역은 rowspan안됨  -->\r\n");
      out.write("				<th>종류</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>기격</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td rowspan=\"5\">피자</td>\r\n");
      out.write("				<td>치즈피자</td>\r\n");
      out.write("				<td>5000</td>\r\n");
      out.write("				<td rowspan=\"11\">사이드</td>\r\n");
      out.write("				<td>오븐구이통닭</td>\r\n");
      out.write("				<td>9000</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>콤비네이션피자</td>\r\n");
      out.write("				<td>6000</td>\r\n");
      out.write("				<td>치킨스틱&윙</td>\r\n");
      out.write("				<td>4900</td>\r\n");
      out.write("	\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>포테이토피자</td>\r\n");
      out.write("				<td>7000</td>\r\n");
      out.write("				<td>치즈오븐스파게티</td>\r\n");
      out.write("				<td>4000</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>고구마피자</td>\r\n");
      out.write("				<td>7000</td>\r\n");
      out.write("				<td>새우링&웨지감자</td>\r\n");
      out.write("				<td>3500</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>불고기피자</td>\r\n");
      out.write("				<td>8000</td>\r\n");
      out.write("				<td>갈릭포테이토</td>\r\n");
      out.write("				<td>3000</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td rowspan=\"6\">토핑</td>\r\n");
      out.write("				<td>고구마무스</td>\r\n");
      out.write("				<td>1000</td>\r\n");
      out.write("				<td>콜라</td>\r\n");
      out.write("				<td>1500</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>콘크림무스</td>\r\n");
      out.write("				<td>1500</td>\r\n");
      out.write("				<td>사이다</td>\r\n");
      out.write("				<td>1500</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>파인애플토핑</td>\r\n");
      out.write("				<td>2000</td>\r\n");
      out.write("				<td>갈릭소스</td>\r\n");
      out.write("				<td>500</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>치즈토핑</td>\r\n");
      out.write("				<td>2000</td>\r\n");
      out.write("				<td>피클</td>\r\n");
      out.write("				<td>300</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>치즈크러스트</td>\r\n");
      out.write("				<td>2000</td>\r\n");
      out.write("				<td>핫소스</td>\r\n");
      out.write("				<td>100</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>치즈바이트</td>\r\n");
      out.write("				<td>3000</td>\r\n");
      out.write("				<td>파마산 치즈가루</td>\r\n");
      out.write("				<td>100</td>			\r\n");
      out.write("			</tr>\r\n");
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	<br>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<form action=\"");
      out.print( request.getContextPath() );
      out.write("/pizzaServlet.do\" method=\"post\">\r\n");
      out.write("		<label>피자 :</label>\r\n");
      out.write("		<select name=\"pizza\">\r\n");
      out.write("			<option value=\"치즈피자/5000\">치즈피자</option>\r\n");
      out.write("			<option value=\"콤비네이션피자/6000\">콤비네이션피자</option>\r\n");
      out.write("			<option value=\"포테이토피자7000\">포테이토피자</option>\r\n");
      out.write("			<option value=\"고구마피자/7000\">고구마피자</option>\r\n");
      out.write("			<option value=\"불고기피자/8000\">불고기피자</option>\r\n");
      out.write("		</select><br>\r\n");
      out.write("		<label>토핑 : </label>\r\n");
      out.write("		<input type=\"checkbox\" name=\"topping\" value=\"고구마무스/1000\">고구마무스\r\n");
      out.write("		<input type=\"checkbox\" name=\"topping\" value=\"콘크림무스/1500\">콘크림무스\r\n");
      out.write("		<input type=\"checkbox\" name=\"topping\" value=\"파인애플토핑/2000\">파인애플토핑\r\n");
      out.write("		<input type=\"checkbox\" name=\"topping\" value=\"치즈토핑/2000\">치즈토핑\r\n");
      out.write("		<input type=\"checkbox\" name=\"topping\" value=\"치즈크러스트/2000\">치즈크러스트\r\n");
      out.write("		<input type=\"checkbox\" name=\"topping\" value=\"치즈바이트/3000\">치즈바이트\r\n");
      out.write("		<br>\r\n");
      out.write("		<label>사이드 : </label>\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"오븐구이통닭/9000\">오븐구이통닭\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"치킨스틱&윙/4900\">치킨스틱&윙\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"치즈오븐스파게티/4000\">치즈오븐스파게티\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"새우링&웨지감자/3500\">새우링&웨지감자\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"갈릭포테이토/3000\">갈릭포테이토\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"콜라/1500\">콜라\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"사이다/1500\">사이다\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"갈릭소스/500\">갈릭소스\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"피클/300\">피클\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"핫소스/100\">핫소스\r\n");
      out.write("		<input type=\"checkbox\" name=\"side\" value=\"파마산 치즈가루/100\">파마산 치즈가루\r\n");
      out.write("		\r\n");
      out.write("		<br><br>\r\n");
      out.write("		<input type=\"submit\" id=\"button\" value=\"확인\">	\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
